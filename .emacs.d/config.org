* User interface

Set the scratch message to be blank
#+begin_src elisp
(setq initial-scratch-message "")
#+end_src

Disable startup message
#+begin_src elisp
  (setq inhibit-startup-message t)
#+end_src 

Disable scrollbar, toolbar, tooltips, and menu bar.
#+begin_src elisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)  
  (tooltip-mode -1)   
#+end_src

Fringe.
#+begin_src elisp
  (set-fringe-mode 15)
#+end_src

Fonts.
#+begin_src elisp
  (cond
   ((string-equal system-type "windows-nt")
    (progn
      (message "Microsoft Windows")))
   ((string-equal system-type "darwin") ;  macOS
    (progn
      (set-face-attribute 'default nil :family "Roboto Mono" :height 145)
      (set-face-attribute 'fixed-pitch nil :family "Roboto Mono" :height 145)
      (set-face-attribute 'variable-pitch nil :family "Times" :height 1.0)
      ))
   ((string-equal system-type "gnu/linux")
    (progn
      (set-face-attribute 'default nil :family "Fira Code Retina")
      (set-face-attribute 'fixed-pitch nil :family "Fira Code Retina")
      (set-face-attribute 'variable-pitch nil :family "Times")
      )))
#+end_src

Use doom-themes.
#+begin_src elisp
  ;; First, install all-the-icons. 
  ;; Note: on a fresh install, we need to run M-x all-the-icons-install-fonts.
  (use-package all-the-icons)

  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one-light t)

    ;; Enable flashing mode-line on errors
    ;; (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

Use doom-modeline.
#+begin_src elisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src

Automatically switch between light and dark modes on macOS. Taken from [[https://notes.arne.me/automatic-darkmode-for-emacs/][here]].
#+begin_src elisp
;;  (setq last-dark-mode-state 'unknown)
;;
 ;; (defun check-and-set-dark-mode ()
   ;; "Automatically set the theme to match if macOS is in dark mode."
   ;; (let ((dark-mode-enabled (system-dark-mode-enabled-p)))
 ;;     (if (not (eq dark-mode-enabled last-dark-mode-state))
 ;;         (progn
 ;;           (setq last-dark-mode-state dark-mode-enabled)
 ;;           (if dark-mode-enabled
 ;;             (load-theme 'modus-vivendi       t)
 ;;             (load-theme 'modus-operandi t))))))
;;
 ;; (defun system-dark-mode-enabled-p ()
 ;;   "Check if dark mode is currently enabled on macOS."
 ;;   (if (string= system-type "darwin")
 ;;       (string=
 ;;        (shell-command-to-string "printf %s \"$( osascript -e \'tell application \"System Events\" to tell appearance preferences to return dark mode\' )\"")
 ;;        "true")
   ;;     nil))

 ;; (check-and-set-dark-mode)
  ;; (run-with-timer 0 5 'check-and-set-dark-mode)
#+end_src

Global line numbers.
#+begin_src elisp
  (add-hook 'emacs-startup-hook #'global-display-line-numbers-mode)
#+end_src

Turn off bell.
#+begin_src elisp
  (setq ring-bell-function 'ignore)
#+end_src

Show matching parenthesis highlighting.
#+begin_src elisp
(show-paren-mode t)
#+end_src

* General global options and keybindings
Use M-/ for commenting, to match other apps (namely overleaf).
#+begin_src elisp
  (global-set-key (kbd "M-/") #'evilnc-comment-or-uncomment-lines)
#+end_src

Make <escape> key behave like escape and keyboard-quit.
#+begin_src elisp
  (global-set-key (kbd "<escape>") #'keyboard-escape-quit)
#+end_src

Line-by-line scrolling.
#+begin_src elisp
  (setq scroll-step            1
	scroll-conservatively  10000)
#+end_src

Use "C-c hjkl" for moving to different windows.
#+begin_src elisp
(global-set-key (kbd "C-c h") #'evil-window-left)
(global-set-key (kbd "C-c j") #'evil-window-down)
(global-set-key (kbd "C-c k") #'evil-window-up)
(global-set-key (kbd "C-c l") #'evil-window-right)
#+end_src

Switch to the new window after splitting
#+begin_src elisp
(setq evil-split-window-below t
      evil-vsplit-window-right t)
#+end_src

Save place so that when a file is reopened, the cursor returns to the place it was when the file was last open.
#+begin_src elisp
(save-place-mode)
#+end_src

** Buffer management
#+begin_src elisp
  (global-set-key (kbd "C-c b") 'my/buffers)
  (defalias 'my/buffers
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "l") #'evil-switch-to-windows-last-buffer)
      (define-key map (kbd "k") #'kill-this-buffer)
      (define-key map (kbd "s") #'switch-to-buffer)
      map))
#+end_src

** Tab management

Create a new tab with the scratch buffer.
#+begin_src elisp
  (defun my/tab-new-scratch ()
    (interactive)
    (tab-new)
    (switch-to-buffer "*scratch*")
    )
#+end_src

The following global keybindings deliver similar functionality to what one would see in a web browser or most IDEs. In particular, cmd+t should create a new tab, ctrl+tab/ctr+shift+tab should cycle forwards/backwards through those tabs, and cmd+w should close the tab.
#+begin_src elisp
  (global-set-key (kbd "C-<tab>") #'tab-next)
  (global-set-key (kbd "C-S-<tab>") #'tab-previous)
  (global-set-key (kbd "M-t") #'my/tab-new-scratch)
  (global-set-key (kbd "M-w") #'tab-close)
#+end_src

** Frame management

Create a new frame with the scratch buffer.
#+begin_src elisp
  (defun my/frame-new-scratch ()
    (interactive)
    (make-frame)
    )
#+end_src

Create a new frame using cmd+n.
#+begin_src elisp
  (global-set-key (kbd "M-n") #'my/frame-new-scratch)
#+end_src

* Mode-specific custom keybindings

Denote “C-c m” my/<localleader>, following Doom’s naming of “SPC m”.

#+begin_src elisp
  (use-package general
    :ensure t
    :config
    (defconst my-leader "C-c")
    (defconst my-local-leader "C-c m")
    )

  (general-create-definer my-leader-def
    :prefix my-leader)

  (general-create-definer my-local-leader-def
    :prefix my-local-leader)

#+end_src

The keybindings for various modes will be defined in their respective sections within [[config.org]].

* Projectile
#+begin_src elisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

* Evil (vim emulation in Emacs)
#+begin_src elisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-undo-system 'undo-fu)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    ;; Use global-visual-line-mode by default so that jk does not go up/down based on logical lines.
    ;; The goal here is to get vim-like behaviour of “nnoremap j gj” and “nnoremap k gk” in emacs.
    (global-visual-line-mode)
    ;;(evil-set-undo-system 'undo-redo)
    ;; (define-key evil-motion-state-map [remap evil-next-line] #'evil-next-visual-line)
    ;; (define-key evil-motion-state-map [remap evil-previous-line] #'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    )

  
#+end_src

Commenting in evil mode with evil-nerd-commenter.
#+begin_src elisp
  (use-package evil-nerd-commenter
    :after evil
    :ensure t)
#+end_src


Surrounding in evil mode with evil-surround (emulation of vim.surround).
#+begin_src elisp
  (use-package evil-surround
    :ensure t
    :config
    (add-hook 'LaTeX-mode-hook (lambda ()
                                 (push '(?\" . ("``" . "''"))
                                       evil-surround-pairs-alist)
                                 (push '(?r . ("\\left ( " . " \\right ) "))
                                       evil-surround-pairs-alist)
                                 (push '(?c . ("\\left { " . " \\right } "))
                                       evil-surround-pairs-alist)
                                 (push '(?s . ("\\left [ " . " \\right ] "))
                                       evil-surround-pairs-alist)
                                 ))
    (global-evil-surround-mode 1))
#+end_src


Additional evil niceties (evil-collection).
#+begin_src elisp
    (use-package evil-collection
      :after evil
      :ensure t
      :config
      (evil-collection-init)
  )
#+end_src

Evil-org-mode integration.
#+begin_src elisp
  (use-package evil-org
    :ensure t
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
#+end_src

* Vertico (vertical completion UI)
A lot of the configuration that follows is taken directly from the [[https://github.com/minad/vertico][vertico.el README.org]].
#+begin_src elisp
  ;; Vertico
  (use-package vertico
    :ensure t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src

Persist history over Emacs restarts. Vertico sorts by history position.
#+begin_src elisp
  (use-package savehist
    :init
    (savehist-mode)
    )
  #+end_src

A few more useful configurations...
#+begin_src elisp
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)
    )
#+end_src

** Orderless
Use the `orderless' completion style.
#+begin_src elisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* which-key
The which-key package makes discoverability of keybindings simple.
#+begin_src elisp
  (use-package which-key
    :init
    ;; Open the which-key buffer more quickly.
    (setq which-key-idle-delay 0.2)
    :config
    (which-key-mode))
#+end_src

* Snippets (YASnippet)

#+begin_src elisp
  (use-package yasnippet
    :init
    (setq yas-snippet-dirs
	  '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1)
    )
#+end_src

** Keybindings
Create some global yasnippet-related keybindings.
#+begin_src elisp

  (general-create-definer my-yasnippet-def
    :prefix "C-c y")

  (my-yasnippet-def
    "" '(:ignore t :which-key "my/yasnippet")
    "i" #'yas-insert-snippet
    "n" #'yas-new-snippet
    )

#+end_src

* On-the-fly checking (flycheck)

#+begin_src elisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
  #+end_src

* Text file navigation ([[https://github.com/hlissner/evil-snipe][evil-snipe]] and [[ [[https://github.com/abo-abo/avy][Avy]])

#+begin_src elisp
    (use-package evil-snipe
      :config
      (evil-snipe-mode +1)
      (evil-snipe-override-mode +1)
      )
#+end_src

#+begin_src elisp
  (use-package avy
    :config
    ;; Don't want a timeout. Just require hitting RET.
    (setq avy-timeout-seconds nil)
    (avy-setup-default)
    (global-set-key (kbd "C-c g") #'avy-goto-char-timer)
    )
#+end_src

* LSP ([[https://github.com/joaotavora/eglot][eglot]])

#+begin_src elisp
  ;; (use-package lsp-mode
  ;;   :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
  ;;          ;; (python-mode . lsp)
  ;;          ;; if you want which-key integration
  ;;          (lsp-mode . lsp-enable-which-key-integration)))

  ;; (use-package lsp-ui :commands lsp-ui-mode)

  ;; One day. Debugger.
  ;; (use-package dap-mode)
#+end_src

Install eglot.
#+begin_src elisp
  (use-package eglot)
#+end_src

Custom keybindings.
#+begin_src elisp
  (general-create-definer my-eglot-def
    :prefix "C-c i")

  (my-eglot-def
    "" '(:ignore t :which-key "my/eglot")
    "d" #'eldoc-doc-buffer
    "D" #'xref-find-definitions-other-window
    "r" #'xref-find-references
    "p" #'flymake-goto-prev-error
    "n" #'flymake-goto-next-error
    )
#+end_src

** Python
#+begin_src elisp
  ;; (use-package lsp-pyright
  ;;   :ensure t)

#+end_src

*** Virtual environment interaction

Make LSP ignore virtual environments that satisfy the pattern "venv*".
#+begin_src elisp
  ;; (defun my/python-lsp-ignore-venv ()
  ;;   (add-to-list 'lsp-file-watch-ignored "[/\\\\]\\venv*"))
  ;; (add-hook 'python-mode-hook
  ;;           #'(lambda () (add-hook 'lsp-mode-hook 'my/python-lsp-ignore-venv)))
#+end_src

* Coding

** Formatting
#+begin_src elisp
  (use-package reformatter
    :defer t)
#+end_src

** Python

#+begin_src elisp
  (use-package pyvenv
    :defer t)
#+end_src

#+begin_src elisp
  (use-package jupyter
    :defer t)
#+end_src

Allow running code from a .py buffer straight to the Jupyter REPL.
#+begin_src elisp
  (add-hook 'jupyter-repl-mode-hook (lambda () (setq jupyter-repl-echo-eval-p t)))
#+end_src

*** Automatic virtual environment loading
We want to create a function `my/python-venv-auto-activate` that searches for any virtual environments with pattern “venv*” in a particular list of directories; if there’s a unique match, activate it; otherwise, warn the user that there’s no/multiple virtual environments.

Pattern for virtual environments. In particular, we will always assume that virtual environments are within a folder satisfying the regex "venv*", for example "venv" or "venv_project1", and so on.
#+begin_src elisp
  (defun my/venv_pattern ()
    "Virtual environment pattern"
    "venv*")
#+end_src

The following functions are essentially helper functions for `my/python-venv-auto-activate` which will itself be defined in the next code block.
#+begin_src elisp
  (defun my/venv_directories_to_search ()
    "List of directories in which to search for `my/venv_pattern`"
    ;; Remove all nil elements
    (seq-filter (lambda (element) element)
                (list
                 (file-name-directory (buffer-file-name))
                 (projectile-project-root))))

  (defun my/get-matching-directory-files (directory regexp)
    "Find all files in DIRECTORY that begin with REGEXP"
    ;; Concatenate the directory to the filename to recover the full path
    (seq-map (lambda ( file ) (file-name-concat directory file))
             ;; Filter out all files that do not begin with REGEXP
             (seq-filter
              (lambda (x) (equal 0 (string-match-p regexp x)))
              (directory-files directory))))

  (defun my/get-matching-directories-files (directories regexp)
    "Find all files in all directories within DIRECTORIES that begin with REGEXP"
    ;; remove duplicates
    (seq-uniq
     ;; flatten the list of lists
     (flatten-tree
      ;; Apply my/get-matching-directory-files to all the directories with regexp.
      (seq-map #'(lambda ( dir ) (my/get-matching-directory-files dir regexp)) directories))))

  (defun my/get-matching-project-root-files (regexp)
    "Find all root directories/files that begin with REGEXP"
    (my/get-matching-directory-files (projectile-project-root) regexp))
#+end_src

Now that we have the above helper functions, we are ready to define my/python-venv-auto-activate.
#+begin_src elisp
  (defun my/python-venv-auto-activate ()
    "Activate the virtual environment satisfying the pattern given by the function, my/venv_pattern if it's a unique match, otherwise do nothing"
    (interactive)
    (setq matching-venvs
          (my/get-matching-directories-files
           (my/venv_directories_to_search) (my/venv_pattern)))
    ;; If we have found a uniquely matching virtual environment, activate it.
    (if (equal (length matching-venvs) 1) ;; if
        (pyvenv-activate (car matching-venvs))
      ;; If there is no matching virtual environment, warn the user.
      (if (equal (length matching-venvs) 0)
          (display-warning :warning "No virtual environment found.")
        ;; If there is more than one matching virtual environment, warn the user.
        (display-warning :warning (concat "Found multiple venvs. Please select one manually using `pyvenv-activate`.")))))
#+end_src

Now that we’ve defined my/python-venv-auto-activate, let’s run it *and start LSP* whenever opening a .py file. Note that we do not use an “(add-hook ‘python-mode-hook …)” approach here because ‘python-mode-hook gets run every time code is sent from the python file to the REPL. Found from sds’s answer [[https://emacs.stackexchange.com/questions/12396/run-command-when-opening-a-file-of-a-specific-filetype][here]].
#+begin_src elisp
  (add-hook 'find-file-hook
            #'(lambda () (when (string= (file-name-extension buffer-file-name) "py")
                           (my/python-venv-auto-activate)
                           (eglot-ensure)
                           )))
#+end_src

*** Formatting
Create a python formatter using [[https://github.com/psf/black][black]].
#+begin_src elisp
  (reformatter-define python-black-format
    :program "black"
    :args (list "-"))
#+end_src

*** python-mode-specific keybindings
#+begin_src elisp
  (my-local-leader-def
    :keymaps 'python-mode-map
    "" '(:ignore t :which-key "my/python")
    "R" #'run-python
    "r" #'pyvenv-restart-python
    "v" #'pyvenv-activate
    "f" #'python-black-format-buffer
    "j" '(:ignore t :which-key "my/jupyter")
    "j R" #'jupyter-repl-associate-buffer
    )
#+end_src

** R (ess)
*** TODO ess-r-mode-specific keybindings
#+begin_src elisp
(defun my/bind-ess-r-keys ()
  (defalias 'my/<localleader>
    (let ((map (make-sparse-keymap)))
      ;; REPL
      (define-key map (kbd "R") #'run-ess-r)
      map)))

(add-hook 'ess-r-mode-hook 'my/bind-ess-r-keys)
#+end_src

I want ess to automatically scroll down in console buffer. Taken from [[https://stackoverflow.com/questions/2710442/in-ess-emacs-how-can-i-get-the-r-process-buffer-to-scroll-to-the-bottom-after-a][here]].
#+begin_src elisp
(setq comint-scroll-to-bottom-on-input t)
(setq comint-scroll-to-bottom-on-output t)
(setq comint-move-point-for-output t)
#+end_src

* Writing
** LaTeX
Install and configure AUCTeX.
#+begin_src elisp

  (use-package latex
    :straight auctex
    :config
    (cond
     ((string-equal system-type "windows-nt")
      (progn
        ;; Windows options here
        ))
     ((string-equal system-type "darwin") ;  macOS
      (progn
        ;; macOS options here

        (setq TeX-view-program-list '(("pdf-tools" TeX-pdf-tools-sync-view)))

        (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
              TeX-source-correlate-start-server t)

        ;; Update PDF buffers after successful LaTeX runs
        (add-hook 'TeX-after-compilation-finished-functions
                  #'TeX-revert-document-buffer)


        ;; (setq TeX-view-program-list '(("Skim_displayline" "/Applications/Skim.app/Contents/SharedSupport/displayline -g -b %n %o %b")))
        ;; ;; Use Skim_displayline by default for opening pdfs.
        ;; (setq TeX-view-program-selection '((output-dvi "open")
        ;; 				   (output-pdf "Skim_displayline")
        ;; 				   (output-html "open")))
        ))
     ((string-equal system-type "gnu/linux")
      (progn
        ;; Linux options here
        ;; Use pdf-tools to open PDF files
        ;; (setq pdf-sync-backward-display-action t)
        ;; (setq pdf-sync-forward-display-action t)       

        (setq TeX-view-program-list '(("pdf-tools" TeX-pdf-tools-sync-view)))

        (setq TeX-view-program-selection '((output-pdf "pdf-tools"))
              TeX-source-correlate-start-server t)

        ;; Update PDF buffers after successful LaTeX runs
        (add-hook 'TeX-after-compilation-finished-functions
                  #'TeX-revert-document-buffer)
        )

      ))
    ;; Use synctex to correlate TeX and PDF.
    (setq TeX-source-correlate-method 'synctex)
    ;; Always start the emacs server for inverse search.
    (setq TeX-source-correlate-start-server t)
    ;; Start correlate mode.
    (TeX-source-correlate-mode)

    ;; Use PDF mode by default.
    (setq-default TeX-PDF-mode t)
    ;; Make emacs aware of multi-file projects.
    (setq-default TeX-master nil)

    ;;Prevent AUCTeX from inserting braces automatically for sub/superscripts.
    (setq TeX-electric-sub-and-superscript nil)

    ;; Set up reftex-auctex interface
    ;; (https://www.gnu.org/software/emacs/manual/html_node/reftex/AUCTeX_002dRefTeX-Interface.html)
    (setq reftex-plug-into-AUCTeX t)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    :defer t
    )
#+end_src

#+RESULTS:

Install math and auctex additions to company-mode.
#+begin_src elisp
  (use-package company-math
    :defer t)
  (use-package company-auctex
    :defer t)
  (use-package company-reftex
    :defer t)
#+end_src

Run LatexMk on save.
Temporarily disabled due to [[https://github.com/tom-tan/auctex-latexmk/pull/40][a bug in auctex-latexmk]].
#+begin_src elisp
  ;; (add-hook 'LaTeX-mode-hook (lambda ()
  ;;                              (add-hook 'after-save-hook 'my/latexmk)))
#+end_src

Create a command to save and compile the current tex document.
#+begin_src elisp
  (defun my/latex-save-and-compile ()
    (interactive)
    (save-buffer)
    (TeX-command "LaTeX" 'TeX-master-file)
    )
#+end_src

#+begin_src elisp
  (defun my/latex-bibtex ()
    (interactive)
    (TeX-command "BibTeX" 'TeX-master-file)
    )
#+end_src

Bind latex-specific bindings.
#+begin_src elisp

  (my-local-leader-def
    :keymaps 'LaTeX-mode-map
    "" '(:ignore t :which-key "my/LaTeX")
    "c" #'my/latex-save-and-compile
    "b" #'my/latex-bibtex
    )


#+end_src


Disable git-gutter when writing latex. Git-gutter seems to slow things down, and isn’t necessary for me when writing latex. Code obtained from [[https://github.com/hlissner/doom-emacs/issues/1482][here]].
#+begin_src elisp
  (setq git-gutter:disabled-modes '(latex-mode))
#+end_src

Remove rainbow delimiters. Maybe add this back?
#+begin_src elisp
  ;; (with-eval-after-load 'tex (remove-hook 'TeX-update-style-hook #'rainbow-delimiters-mode))
#+end_src

** pdf-tools
#+begin_src elisp
  (use-package pdf-tools
    :config 
    ;; Turn off blinking in pdf-view
    ;; Taken from https://github.com/doomemacs/doomemacs/pull/1107
    (add-hook 'pdf-view-mode-hook
              (lambda ()
                (set (make-local-variable 'evil-normal-state-cursor) (list nil))))       

    (pdf-tools-install))

#+end_src

** Org-mode
#+begin_src elisp
  (use-package org
    :defer t
    :config
    (setq org-startup-indented t))

#+end_src

#+begin_src elisp
  (use-package org-download
    :config
    ;; Enable org-download so that we can drag and drop screenshots into org.
    (add-hook 'dired-mode-hook 'org-download-enable)
    :defer t
    )
#+end_src

Sync with beorg on iOS.
#+begin_src elisp
  (cond
   ((string-equal system-type "windows-nt")
    (progn
      (message "Not set up on windows")))
   ((string-equal system-type "darwin") ;  macOS
    (progn
    (setq
     org-directory
     "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/")
      ))
   ((string-equal system-type "gnu/linux")
    (progn
    (setq
     org-directory
     "/mnt/c/Users/t-ianw/iCloudDrive/iCloud~com~appsonthemove~beorg/org")
      )))
#+end_src

Set org agenda files.
#+begin_src elisp
(setq org-agenda-files (list org-directory))
#+end_src

Org-babel languages to load
#+begin_src elisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (jupyter . t)))
#+end_src

*** Custom functions
#+begin_src elisp
  (defun my/org-sort-todo-list ()
    "Sort an org-mode todo-list from the heading of the list by priority and todo order."
    (interactive)
    (org-sort-entries nil ?p nil nil nil nil)
    (org-sort-entries nil ?o nil nil nil nil))


  (defun my/org-sort-todo-list-from-within ()
    "Sort an org-mode todo-list from within the list by priority and todo order."
    (interactive)
    ;; Move up a heading
    (outline-up-heading 1)
    ;; Sort once at top of heading
    (my/org-sort-todo-list))

  (defun my/org-sort-todo-list-from-within-and-save ()
    "Run my/org-sort-todo-list-from-within and save."
    (interactive)
    (my/org-sort-todo-list-from-within)
    (save-buffer)
    )

#+end_src

*** org-mode-specific keybindings
#+begin_src elisp

  (my-local-leader-def
  :keymaps 'org-mode-map
  "" '(:ignore t :which-key "my/org")
  "s" #'my/org-sort-todo-list-from-within-and-save
  )


#+end_src

*** Headings
Make first-level org heading larger.
#+begin_src elisp
(custom-set-faces '(org-level-1 ((t (:inherit outline-1 :height 1.2)))))
#+end_src

*** Todo keywords
#+begin_src elisp
  (setq org-todo-keywords
        '((sequence "IN-PROGRESS(p)" "TODO(t)" "WAITING(w)" "IDEA(i)"
                    "|" "DONE" "CANCELLED(c)")))
  ;; Set other todo colors according to the nord theme (https://www.nordtheme.com/)
  ;; (setq org-todo-keyword-faces
  ;;       '(("IN-PROGRESS" . "#88C0D0")
  ;;         ("WAITING" . "#5E81AC")
  ;;         ("IDEA" . "#EBCB8B")
  ;;         ("CANCELED" . "#BF616A"))
  ;;       )

  (setq org-log-done 'time)
#+end_src

** Org-roam
#+begin_src elisp
  (use-package org-roam
    :config
    ;; Set org-roam directory.
    (setq
     org-roam-directory
     "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org")

    ;; Auto-update database immediately after saving.
    (setq org-roam-db-update-method 'immediate)
    )
#+end_src

Change capture template so that the timestamp is not in the filename.
#+begin_src elisp
  (setq org-roam-capture-templates
        '(("d" "default" plain #'org-roam-capture--get-point "%?" :file-name "${slug}" :head "#+title: ${title}\n" :unnarrowed t)))
#+end_src

*** Org-roam-specific keybindings
#+begin_src elisp

  (general-create-definer my-notes-def
    :prefix "C-c n")

  (my-notes-def
    "" '(:ignore t :which-key "my/notes")
    ;; Open org-roam buffer
    "r" #'org-roam
    ;; Find file
    "f" #'org-roam-find-file
    ;; Capture
    "c" #'org-roam-capture
    ;; Insert link
    "i" #'org-roam-insert
    ;; Insert link immediate
    "i" #'org-roam-insert-immediate
    )
#+end_src

** Markdown
*** markdown-mode-specific keybindings
#+begin_src elisp
  (defun my/bind-markdown-keys ()
    (defalias 'my/<localleader>
      (let ((map (make-sparse-keymap)))
        ;; Format markdown table
        (define-key map (kbd "f") #'markdown-table-align)
        ;; Refresh toc
        (define-key map (kbd "r") #'markdown-toc-refresh-toc)
        map)))

  (add-hook 'markdown-mode-hook 'my/bind-markdown-keys)
#+end_src

** Spellcheck (spell-fu)

#+begin_src elisp
  ;; (defun my/save-word ()
  ;;   (interactive)
  ;;   (let ((current-location (point))
  ;;         (word (flyspell-get-word)))
  ;;     (when (consp word)    
  ;;       (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))

#+end_src

Install spell-fu
#+begin_src elisp
  (use-package spell-fu
    :config
    ;; Always enable my personal dictionary.
    ;; This requires aspell to be installed on the system and for the file "~/.aspell.en.pws" to exist.
    (add-hook 'spell-fu-mode-hook
              (lambda ()
                (spell-fu-dictionary-add
                 (spell-fu-get-personal-dictionary
                  "iws"
                  "~/.aspell.en.pws"))))

    ;; Enable spell-fu globally.
    ;; (global-spell-fu-mode)

    ;; Org-specific settings.
    (add-hook 'org-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(org-block-begin-line
                        org-block-end-line
                        org-meta-line
                        org-link
                        org-code
                        org-block))
                (spell-fu-mode)))

    ;; LaTeX-specific settings.
    (add-hook 'LaTeX-mode-hook
              (lambda ()
                (setq spell-fu-faces-exclude
                      '(font-latex-math-face))
                (spell-fu-mode)))
    )
#+end_src
 
#+begin_src elisp
  (global-set-key (kbd "C-c s") #'my/spelling)

  (defun my/bind-spelling-bindings ()
    (defalias 'my/spelling
      (let ((map (make-sparse-keymap)))
        ;; Add word to dictionary
        (define-key map (kbd "a") #'spell-fu-word-add)
        map)))

  (add-hook 'spell-fu-mode-hook 'my/bind-spelling-bindings)
#+end_src

* Frequently accessed files and folders
#+begin_src elisp
  (setq documents-directory "~/Documents")
  (setq cloud-directory "~/Box Sync")
  (setq dotemacs-directory "~/.emacs.d")
#+end_src

#+begin_src elisp
  (defun my/open-config-org-file ()
    "Open my config.org file."
    (interactive)
    (find-file (expand-file-name "config.org" dotemacs-directory)))

  (defun my/open-init-file ()
    "Open my init.el file."
    (interactive)
    (find-file (expand-file-name "init.el" dotemacs-directory)))

  (defun my/open-snippets-directory ()
    "Open my snippets directory."
    (interactive)
    (ido-find-file-in-dir (expand-file-name "snippets" dotemacs-directory)))

  (defun my/open-themes-directory ()
    (interactive)
    (ido-find-file-in-dir (expand-file-name "themes" dotemacs-directory)))

  (defun my/open-documents-directory ()
    (interactive)
    (ido-find-file-in-dir documents-directory))

  (defun my/open-gitprojects-directory ()
    (interactive)
    (ido-find-file-in-dir (expand-file-name "GitProjects" documents-directory)))

  (defun my/open-papers-directory ()
    (interactive)
    (ido-find-file-in-dir (expand-file-name "GitProjects/papers" documents-directory)))

  (defun my/open-cloud-unencrypted-directory ()
    (interactive)
    (ido-find-file-in-dir (expand-file-name "unencrypted" cloud-directory)))

  (defun my/open-org-directory ()
    (interactive) (ido-find-file-in-dir org-directory))
#+end_src

"C-c o" will be reserved for opening files/directories
#+begin_src elisp
  (global-set-key (kbd "C-c o") 'my/open)

  (defalias 'my/open
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "e") #'my/emacs-config)
      (define-key map (kbd "t") #'my/open-themes-directory)
      (define-key map (kbd "o") #'my/open-org-directory)
      (define-key map (kbd "d") #'my/open-documents-directory)
      (define-key map (kbd "g") #'my/open-gitprojects-directory)
      (define-key map (kbd "p") #'my/open-papers-directory)
      (define-key map (kbd "c") #'my/open-cloud-unencrypted-directory)
      map) "Config-related bindings")

  (defalias 'my/emacs-config
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "c") #'my/open-config-org-file)
      (define-key map (kbd "i") #'my/open-init-file)
      (define-key map (kbd "s") #'my/open-snippets-directory)
      map) "Config-related bindings")
#+end_src

* Autocompletion (company)

#+begin_src elisp
  (use-package company
    :config
    (global-company-mode)
    )
#+end_src

Make C-SPC the completion key
#+begin_src elisp
  (global-set-key (kbd "C-SPC") #'company-complete)
#+end_src

Show autocomplete after just 2 characters have been typed
#+begin_src elisp
  (setq company-minimum-prefix-length 2)
#+end_src

Always show a dropedown list (no inline completions). Taken from [[https://emacs.stackexchange.com/questions/36619/show-tooltip-even-if-there-is-only-one-candidate-in-company-mode][here]].
#+begin_src elisp
  (setq company-frontends
        (nconc
         '(company-pseudo-tooltip-frontend)
         (remove
          'company-pseudo-tooltip-unless-just-one-frontend
          (remove
           'company-preview-if-just-one-frontend company-frontends))))
#+end_src

Make autocomplete show up faster
#+begin_src elisp
  (setq company-idle-delay 0.05)
#+end_src

** YASnippet
Add YASnippet to company-backends. Taken from [[https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/][reddit]].
#+begin_src elisp
  (defvar my/enable-yas t "Enable yasnippet for all backends.")

  (defun my/backend-with-yas (backend)
    (if (or (not my/enable-yas)
            (and (listp backend)
                 (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'my/backend-with-yas company-backends))
#+end_src

** TODO LaTeX (auctex) 


#+begin_src elisp
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (company-mode)
              (make-local-variable 'company-backends)
              (setq company-backends
                    '(company-files
                      company-reftex-labels
                      company-reftex-citations
                      company-bibtex
                      company-auctex-macros
                      company-auctex-symbols
                      company-auctex-environments
                      ;; company-keywords
                      company-latex-commands
                      company-math-symbols-latex
                      ;; :with
                      company-yasnippet))))
#+end_src

** TODO Python
#+begin_src elisp
  ;; (after! python
  ;;         (add-hook 'python-mode-hook
  ;;                   (lambda ()
  ;;                     (company-mode)
  ;;                     (make-local-variable 'company-backends)
  ;;                     (setq company-backends
  ;;                           '(company-files
  ;;                             company-capf
  ;;                             company-yasnippet
  ;;                             company-dabbrev-code))
  ;;                     (setq lsp-completion-provider :none))))

#+end_src

* Undo-redo (undo-fu)
#+begin_src elisp
  (use-package undo-fu)
  (use-package undo-fu-session
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))
  (global-undo-fu-session-mode)
  (undo-fu-session-recover)
#+end_src

* git (Magit)

#+begin_src elisp
  (use-package magit
    :config
    ;; Show fine differences for the current diff hunk only.
    (setq magit-diff-refine-hunk t)

    ;; Make escape quit transient maps.
    (define-key transient-map (kbd "<escape>") 'transient-quit-one)

    :defer t)
#+end_src

Enter insert mode when firing up a magit commit.
#+begin_src elisp
(add-hook 'git-commit-mode-hook 'evil-insert-state)
#+end_src

* Configuration-related

Disable custom.
#+begin_src elisp
(setq custom-file null-device)
#+end_src

* Window size on startup

Set initial frame size and position of the Emacs window.
The following code is largely based on https://christiantietze.de/posts/2021/06/emacs-center-window-on-current-monitor/ and https://www.reddit.com/r/emacs/comments/9c0a4d/tip_setting_initial_frame_size_and_position/
#+begin_src elisp
  (defun my/set-initial-frame-size ()
    "Set the initial frame size to something reasonable. Works on multiple monitors"
    (interactive)
    (let* ((base-factor 0.93)
           (monitor-w (nth 2 (frame-monitor-workarea (selected-frame))))
           (monitor-h (nth 3 (frame-monitor-workarea (selected-frame))))
           (a-width (* monitor-w base-factor))
           (a-height (* monitor-h base-factor)))
      (set-frame-size (selected-frame)
                      (truncate a-width)
                      (truncate a-height) t)))

  (defun my/frame-recenter (&optional frame)
    "Center FRAME on the screen.
  FRAME can be a frame name, a terminal name, or a frame.
  If FRAME is omitted or nil, use currently selected frame."
    (interactive)
    (unless (eq 'maximised (frame-parameter nil 'fullscreen))
      (let* ((frame (or (and (boundp 'frame)
                             frame)
                        (selected-frame)))
             (frame-w (frame-pixel-width frame))
             (frame-h (frame-pixel-height frame))
             ;; frame-monitor-workarea returns (x y width height) for the monitor
             (monitor-w (nth 2 (frame-monitor-workarea frame)))
             (monitor-h (nth 3 (frame-monitor-workarea frame)))
             (center (list (/ (- monitor-w frame-w) 2)
                           (/ (- monitor-h frame-h) 2))))
        (apply 'set-frame-position (flatten-list (list frame center))))))

  (defun my/set-initial-frame ()
    (interactive)
    (my/set-initial-frame-size)
    (my/frame-recenter))

  (cond
   ((string-equal system-type "windows-nt")
    (progn
      ;; Windows options here
      ))
   ((string-equal system-type "darwin") ;  macOS
    (progn
      ;; macOS options here
      (setq frame-resize-pixelwise t)
      (add-hook 'window-setup-hook #'my/set-initial-frame)
      ))
   ((string-equal system-type "gnu/linux")
    (progn
      ;; Linux options here
      )))  

#+end_src

* Open config on startup.

#+begin_src elisp
  ;; (switch-to-buffer (find-file-noselect "~/.emacs.d/config.org"))
#+end_src
