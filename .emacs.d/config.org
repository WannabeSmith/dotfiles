* User interface
Disable startup message
#+begin_src elisp
  (setq inhibit-startup-message t)
#+end_src 

Disable scrollbar, toolbar, tooltips, and menu bar.
#+begin_src elisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)  
  (tooltip-mode -1)   
  (menu-bar-mode -1)  
#+end_src

Fringe.
#+begin_src elisp
  (set-fringe-mode 15)
#+end_src

Fonts.
#+begin_src elisp
  (set-face-attribute 'default nil :family "Roboto Mono" :height 140)
  (set-face-attribute 'fixed-pitch nil :family "Roboto Mono" :height 1.0)
  (set-face-attribute 'variable-pitch nil :family "Roboto" :height 1.0)
#+end_src

Theme.
#+begin_src elisp
  (load-theme 'modus-operandi)
#+end_src

Global line numbers.
#+begin_src elisp
  ;; (add-hook 'emacs-startup-hook #'global-display-line-numbers-mode)
#+end_src

Turn off bell
#+begin_src elisp
  (setq ring-bell-function 'ignore)
#+end_src

* General global keybindings

The following global keybindings are heavily macOS-focused.

I'm using [[https://bitbucket.org/mituharu/emacs-mac/src/master/][Yamamoto Mitsuharu's Emacs port]] which uses "command" as the meta key. Here, I'm just mapping "option" to 'meta and "command" to 'super. 
#+begin_src elisp
(setq mac-option-modifier 'meta)
(setq mac-command-modifier 'super)
#+end_src

Use cmd+x for M-x.
#+begin_src elisp
  (global-set-key (kbd "s-x") #'execute-extended-command)
#+end_src

Exit Emacs using cmd+q
#+begin_src elisp
  (global-set-key (kbd "s-q") #'save-buffers-kill-terminal)
#+end_src

Paste from the clipboard using cmd+v.
#+begin_src elisp
  (global-set-key (kbd "s-v") #'evil-paste-after)
#+end_src

Make <escape> key behave like escape and keyboard-quit.
#+begin_src elisp
  (global-set-key (kbd "<escape>") #'keyboard-escape-quit)
#+end_src

Line-by-line scrolling.
#+begin_src elisp
  (setq scroll-step            1
	scroll-conservatively  10000)
#+end_src

* Evil (vim emulation in Emacs)
#+begin_src elisp
      (use-package evil
        :init
        (setq evil-want-C-i-jump nil) ;; Disable C-i to jump forward to restore TAB functionality in Org mode.
        (setq evil-want-integration t)
        (setq evil-want-keybinding nil)
        (setq evil-want-C-u-scroll t)
        (setq evil-undo-system 'undo-fu)
        :config
        (evil-mode 1)
        ;;(evil-set-undo-system 'undo-redo)
        ;; Use visual line motions even outside of visual-line-mode buffers
        ;;(evil-global-set-key 'motion "j" 'evil-next-visual-line)
        ;;(evil-global-set-key 'motion "k" 'evil-previous-visual-line)

        (evil-set-initial-state 'messages-buffer-mode 'normal)
        (evil-set-initial-state 'dashboard-mode 'normal)
        )

#+end_src


** Commenting in evil mode (evil-commentary)
#+begin_src elisp
      (use-package evil-commentary
        :config
        (evil-commentary-mode))
#+end_src

** Additional evil niceties (evil-collection)
#+begin_src elisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))

  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))
#+end_src
    
* Vertico (vertical completion UI)
A lot of the configuration that follows is taken directly from the [[https://github.com/minad/vertico][vertico.el README.org]].
#+begin_src elisp
  ;; Vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src

Persist history over Emacs restarts. Vertico sorts by history position.
#+begin_src elisp
  (use-package savehist
    :init
    (savehist-mode)
    )
  #+end_src

A few more useful configurations...
#+begin_src elisp
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t)
    )
#+end_src

** Orderless
Use the `orderless' completion style.
#+begin_src elisp
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* which-key
The which-key package makes discoverability of keybindings simple.
#+begin_src elisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src
* Snippets (YASnippet)

#+begin_src elisp
  (use-package yasnippet
    :init
    (setq yas-snippet-dirs
	  '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1)
    )
#+end_src

** Keybindings
Create some global yasnippet-related keybindings.
#+begin_src elisp
  (global-set-key (kbd "C-c y") 'my/yasnippet)

  (defalias 'my/yasnippet
    (let ((map (make-sparse-keymap)))
      ;; Add word to dictionary
      (define-key map (kbd "i") #'yas-insert-snippet)
      (define-key map (kbd "n") #'yas-new-snippet)
      map))
#+end_src

* Autocompletion (company)

#+begin_src elisp
  (use-package company
    :config
    (global-company-mode)
    )
#+end_src

Make C-SPC the completion key
#+begin_src elisp
  (global-set-key (kbd "C-SPC") #'company-complete)
#+end_src

Show autocomplete after just 2 characters have been typed
#+begin_src elisp
  (setq company-minimum-prefix-length 2)
#+end_src

Always show a dropedown list (no inline completions). Taken from [[https://emacs.stackexchange.com/questions/36619/show-tooltip-even-if-there-is-only-one-candidate-in-company-mode][here]].
#+begin_src elisp
  (setq company-frontends
        (nconc
         '(company-pseudo-tooltip-frontend)
         (remove
          'company-pseudo-tooltip-unless-just-one-frontend
          (remove
           'company-preview-if-just-one-frontend company-frontends))))
#+end_src

Make autocomplete show up faster
#+begin_src elisp
  (setq company-idle-delay 0.05)
#+end_src

** YASnippet
Add YASnippet to company-backends. Taken from [[https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/][reddit]].
#+begin_src elisp
  (defvar my/enable-yas t "Enable yasnippet for all backends.")

  (defun my/backend-with-yas (backend)
    (if (or (not my/enable-yas)
            (and (listp backend)
                 (member 'company-yasnippet backend)))
        backend
      (append (if (consp backend) backend (list backend))
              '(:with company-yasnippet))))

  (setq company-backends (mapcar #'my/backend-with-yas company-backends))
#+end_src

** TODO LaTeX (auctex) 
#+begin_src elisp
  ;; (add-hook 'LaTeX-mode-hook
  ;;           (lambda ()
  ;;             (company-mode)
  ;;             (make-local-variable 'company-backends)
  ;;             (setq company-backends
  ;;                   '(company-files
  ;;                     company-reftex-labels
  ;;                     company-reftex-citations
  ;;                     company-bibtex
  ;;                     company-auctex-macros
  ;;                     company-auctex-symbols
  ;;                     company-auctex-environments
  ;;                     ;; company-keywords
  ;;                     company-latex-commands
  ;;                     company-math-symbols-latex
  ;;                     ;; :with
  ;;                     company-yasnippet))))
#+end_src

** TODO Python
#+begin_src elisp
  ;; (after! python
  ;;         (add-hook 'python-mode-hook
  ;;                   (lambda ()
  ;;                     (company-mode)
  ;;                     (make-local-variable 'company-backends)
  ;;                     (setq company-backends
  ;;                           '(company-files
  ;;                             company-capf
  ;;                             company-yasnippet
  ;;                             company-dabbrev-code))
  ;;                     (setq lsp-completion-provider :none))))

#+end_src

* Undo-redo (undo-fu)

#+begin_src elisp
  (use-package undo-fu)
  (use-package undo-fu-session
    :config
    (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))
  (global-undo-fu-session-mode)
  (undo-fu-session-recover)
#+end_src

* org-mode

#+begin_src elisp
  (use-package org
    :config
    (setq org-startup-indented t) )

#+end_src

#+begin_src elisp
  (use-package org-download
    :config
    ;; Enable org-download so that we can drag and drop screenshots into org.
    (add-hook 'dired-mode-hook 'org-download-enable)
    )
#+end_src

Sync with beorg on iOS.
#+begin_src elisp
    (setq
     org-directory
     "~/Library/Mobile Documents/iCloud~com~appsonthemove~beorg/Documents/org/")
#+end_src


Org-babel languages to load
** TODO install jupyter
#+begin_src elisp
  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((emacs-lisp . t)
  ;;    (python . t)
  ;;    (jupyter . t)))
#+end_src

** Custom functions
#+begin_src elisp
(defun my/org-sort-todo-list ()
  "Sort an org-mode todo-list from the heading of the list by priority and todo order."
  (interactive)
  (org-sort-entries nil ?p nil nil nil nil)
  (org-sort-entries nil ?o nil nil nil nil))


(defun my/org-sort-todo-list-from-within ()
  "Sort an org-mode todo-list from within the list by priority and todo order."
  (interactive)
  ;; Move up a heading
  (outline-up-heading 1)
  ;; Sort once at top of heading
  (my/org-sort-todo-list))
#+end_src

** Headings
Make first-level org heading larger.
#+begin_src elisp
(custom-set-faces '(org-level-1 ((t (:inherit outline-1 :height 1.2)))))
#+end_src

** Todo keywords
#+begin_src elisp
  (setq org-todo-keywords
        '((sequence "IN-PROGRESS(p)" "TODO(t)" "WAITING(w)" "IDEA(i)"
                    "|" "DONE" "CANCELLED(c)")))
  ;; Set other todo colors according to the nord theme (https://www.nordtheme.com/)
  ;; (setq org-todo-keyword-faces
  ;;       '(("IN-PROGRESS" . "#88C0D0")
  ;;         ("WAITING" . "#5E81AC")
  ;;         ("IDEA" . "#EBCB8B")
  ;;         ("CANCELED" . "#BF616A"))
  ;;       )

  (setq org-log-done 'time)
#+end_src

* git (Magit)

#+begin_src elisp
  (use-package magit)
#+end_src

Enter insert mode when firing up a magit commit.
#+begin_src elisp
(add-hook 'git-commit-mode-hook 'evil-insert-state)
#+end_src

* Configuration-related

Disable custom.
#+begin_src elisp
(setq custom-file null-device)
#+end_src

Open [[~/.emacs.d/config.org]] on startup.
#+begin_src elisp
  (switch-to-buffer (find-file-noselect "~/.emacs.d/config.org"))
#+end_src

* Window size on startup

Set initial frame size and position of the Emacs window.
The following code is largely based on https://christiantietze.de/posts/2021/06/emacs-center-window-on-current-monitor/ and https://www.reddit.com/r/emacs/comments/9c0a4d/tip_setting_initial_frame_size_and_position/
#+begin_src elisp
(defun my/set-initial-frame-size ()
  "Set the initial frame size to something reasonable. Works on multiple monitors"
  (interactive)
  (let* ((base-factor 0.93)
         (monitor-w (nth 2 (frame-monitor-workarea (selected-frame))))
         (monitor-h (nth 3 (frame-monitor-workarea (selected-frame))))
         (a-width (* monitor-w base-factor))
         (a-height (* monitor-h base-factor)))
    (set-frame-size (selected-frame)
                    (truncate a-width)
                    (truncate a-height) t)))

(defun my/frame-recenter (&optional frame)
  "Center FRAME on the screen.
FRAME can be a frame name, a terminal name, or a frame.
If FRAME is omitted or nil, use currently selected frame."
  (interactive)
  (unless (eq 'maximised (frame-parameter nil 'fullscreen))
    (let* ((frame (or (and (boundp 'frame)
                           frame)
                      (selected-frame)))
           (frame-w (frame-pixel-width frame))
           (frame-h (frame-pixel-height frame))
           ;; frame-monitor-workarea returns (x y width height) for the monitor
           (monitor-w (nth 2 (frame-monitor-workarea frame)))
           (monitor-h (nth 3 (frame-monitor-workarea frame)))
           (center (list (/ (- monitor-w frame-w) 2)
                         (/ (- monitor-h frame-h) 2))))
      (apply 'set-frame-position (flatten-list (list frame center))))))

(defun my/set-initial-frame ()
  (interactive)
  (my/set-initial-frame-size)
  (my/frame-recenter))

(setq frame-resize-pixelwise t)
(add-hook 'window-setup-hook #'my/set-initial-frame)
#+end_src

* To-config
** TODO [#A] company
** TODO [#A] AucTex 
** TODO [#B] Flycheck
** TODO [#B] git-sync snippets
** TODO [#B] Add keybindings and other settings from doom config
** TODO [#B] Make org work with [ ]-style list items
** TODO [#C] add CMD+W for closing buffer.
** TODO [#C] add modeline of some kind
** TODO [#C] use "enter" to make a TODO done.
** TODO [#C] use "enter" to evaluate a code chunk.
** DONE [#A] add magit
CLOSED: [2022-05-11 Wed 15:03]
** DONE make vertico do fuzzy completion
CLOSED: [2022-05-11 Wed 14:48]
** DONE organize config.org
CLOSED: [2022-05-11 Wed 14:41]
** DONE straight
CLOSED: [2022-05-11 Wed 14:42]
** DONE escape key
CLOSED: [2022-05-11 Wed 00:46]
** DONE org mode folding
CLOSED: [2022-05-11 Wed 00:46]
** DONE Make org-mode better looking
CLOSED: [2022-05-11 Wed 12:33]
** DONE yasnippet
** DONE auto-commenting
** DONE undo persist
** DONE cmd+v needs to paste.
** DONE line numbers

